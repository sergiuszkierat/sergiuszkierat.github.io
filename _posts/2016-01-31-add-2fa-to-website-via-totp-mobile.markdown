---
layout: post
title: "Add Two Factor Auth to your website via a TOTP mobile app"
date: 2016-01-31T12:57:26+01:00
---

Life story
-------------
It was a middle of 2013. I met with my friend, Adam. Actually, we were sitting on the terrace, we were drinking some red wine
and talking about life, our reminiscences and plans.
All of a sudden, Adam said - listen - I would tell you a life story that happened to one of my friends.
His friend, who lives in Poland as well, got a warning about suspicious activity on Gmail account made from China.
He's never been in China, thus obviously it was an hacker's attack.

I thought - it could have been me.

How to be more protected?
-------------
After that, I made some research and I found out about [2-Step Verification](https://en.wikipedia.org/wiki/Two-factor_authentication).

Two-step verification (aka 2FA) adds an additional layer of security to the login process, requiring you to enter a special code, in addition to your regular username and password. The goal is to combine something you know (your password) with something only you would have access to (your [security token](https://en.wikipedia.org/wiki/Security_token)).

In order to be more protected, I encourage you to use 2FA. In a few fast steps I switched 2FA for Gmail account on.

<blockquote class="twitter-tweet" align="center" width="350"><p lang="en" dir="ltr"><a href="https://twitter.com/hashtag/gmail?src=hash">#gmail</a> 2-step verification activated.</p>&mdash; Sergiusz Kierat (@kierat_s) <a href="https://twitter.com/kierat_s/status/360071237692686337">July 24, 2013</a></blockquote> <script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

There is an awesome page [TwoFactorAuth.org](https://twofactorauth.org/) where you could find a comprehensive list of sites that support 2FA as well as the methods that they support it.

You have to know, 2FA is sometimes cumbersome, especially if you lose your mobile. Nevertheless, it is worth to use it.

How to add 2FA to your website?
-------------

Prerequisites
=============
* [Play Framework 2.4.x](https://www.playframework.com/documentation/2.4.x/ScalaHome)
* [Google Authenticator](https://en.wikipedia.org/wiki/Google_Authenticator)
* [aerogear-otp-java](https://github.com/aerogear/aerogear-otp-java)
* [jQuery.qrcode](https://github.com/lrsjng/jquery-qrcode)

App - pure and simple
=============
Under these circumstances, the creation of website is very straight forward.

* **GET /configure**

```
  def configureOTP = Action {
    Ok(views.html.configure(OneTimePassword.uri(systemName, name, secret)))
  }
```

Firstly, we have to generate a [Key Uri](https://github.com/google/google-authenticator/wiki/Key-Uri-Format)
and configure Google Authenticator with it.

Regarding to OTP, the whole magic is being done within _OneTimePassword_.

{% highlight scala %}
package otp

import org.jboss.aerogear.security.otp.Totp
import org.jboss.aerogear.security.otp.api.Base32

object OneTimePassword {
  def secret = Base32.random

  def verify(secret: String, otp: String) = {
    val totp = new Totp(secret)
    totp.verify(otp)
  }

  def uri(system: String, name: String, secret: String) = {
    val totp = new Totp(secret)

    val uriWithoutIssuer = totp.uri(s"$system:$name")
    s"$uriWithoutIssuer&issuer=$system"
  }
}
{% endhighlight %}

* **GET /**

```
  def index = Action {
    Ok(views.html.index(otpForm))
  }
```

Secondly, please take an OTP which is periodically generated by Google Authenticator in order to be verified.

![google_authenticator](/images/2fa/google_authenticator.png)

* **POST /otp**

```
  def verifyPassword() = Action { implicit request =>
    otpForm.bindFromRequest.fold(
      formWithErrors => {
        BadRequest(views.html.index(formWithErrors))
      },
      otpData => {
        play.Logger.debug(s"Delivered otp is '$otpData'")
        if (OneTimePassword.verify(secret, otpData)) {
          play.Logger.info(s"Passed!")
          Redirect(routes.Application.secured())
        }
        else {
          play.Logger.error(s"Failed!")
          BadRequest(views.html.index(otpForm.withGlobalError("Bad OTP")))
        }
      }
    )
  }
```

Lastly, we take a provided OTP and verify it.

A working sample application is available on [GitHub](https://github.com/sergiuszkierat/blog-2FA).
